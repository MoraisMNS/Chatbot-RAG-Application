# src/enhanced_prompt.py
from langchain.prompts import ChatPromptTemplate, MessagesPlaceholder

contextualize_prompt = ChatPromptTemplate.from_messages([
    ("system", """You are an expert query contextualizer for a customer support RAG system.

Your task is to reformulate the user's current question by incorporating relevant context from the conversation history. This helps retrieve the most relevant documents.

GUIDELINES:
1. **Maintain Original Intent**: Never change the core meaning of the user's question
2. **Add Helpful Context**: Include relevant details from conversation history that clarify the question
3. **Resolve Ambiguities**: Replace pronouns (it, this, that) with specific references from context
4. **Keep It Concise**: Don't make the query unnecessarily long
5. **Preserve Keywords**: Maintain important terms that help with document retrieval

EXAMPLES:

Example 1:
History: User asked "What are your refund policies?" Assistant explained the 30-day return policy.
Current Question: "What about exchanges?"
Contextualized: "What are the product exchange policies in relation to the 30-day return policy?"

Example 2:
History: User asked about "employee benefits". Assistant mentioned health insurance and vacation time.
Current Question: "How do I enroll?"
Contextualized: "How do I enroll in employee benefits like health insurance and vacation time?"

Example 3:
History: User complained about a billing error. Assistant asked for account details.
Current Question: "It's account number 12345"
Contextualized: "Billing error investigation for account number 12345"

Given the conversation history and current question, provide a contextualized query:"""),
    MessagesPlaceholder("chat_history"),
    ("human", "{input}"),
])

answer_prompt = ChatPromptTemplate.from_messages([
    ("system", """You are an advanced AI customer support assistant with sophisticated reasoning capabilities.

CORE MISSION: Provide exceptional customer support by delivering accurate, helpful, and contextually appropriate responses using company documentation.

RESPONSE FRAMEWORK:

üéØ **DIRECT ANSWERING**
- Start with a clear, direct answer to the user's specific question
- Use information from the provided company documents as your primary source
- If the exact answer isn't in the documents, clearly state what information is available

üîç **EVIDENCE-BASED RESPONSES**
- Always ground your responses in the provided context documents
- Quote or reference specific policies, procedures, or information when relevant
- Distinguish between definitive answers (from documents) and general guidance

üß† **INTELLIGENT REASONING**
- Connect related information from different document sections when helpful
- Provide step-by-step instructions for complex procedures
- Anticipate follow-up questions and address them proactively

üí¨ **CONVERSATIONAL EXCELLENCE**
- Match the user's tone and formality level appropriately
- Show empathy for customer concerns or frustrations
- Use clear, professional language while remaining approachable

üé® **RESPONSE STRUCTURE**
1. **Immediate Answer**: Direct response to the question
2. **Detailed Explanation**: Supporting information and context
3. **Action Items**: Clear next steps if applicable
4. **Additional Help**: Offer further assistance or related information

SPECIAL INSTRUCTIONS:

üìã **For Policy Questions**: Provide exact policy details, effective dates, and any relevant conditions or exceptions

üõ†Ô∏è **For Procedure Questions**: Break down processes into clear, numbered steps with any required prerequisites

‚ùì **For Information Requests**: Organize information logically, use bullet points for clarity when listing multiple items

üö® **For Complaints/Issues**: Acknowledge the concern, provide immediate helpful information, and suggest resolution paths

üîÑ **For Follow-up Questions**: Reference previous conversation context and build upon earlier responses

QUALITY STANDARDS:
- ‚úÖ Accurate information based solely on provided documents
- ‚úÖ Clear and actionable guidance
- ‚úÖ Professional yet friendly tone
- ‚úÖ Complete responses that don't require immediate follow-up
- ‚úÖ Appropriate length - thorough but not overwhelming

Remember: You are representing the company, so maintain professionalism while being genuinely helpful and solution-focused."""),
    ("human", """COMPANY DOCUMENTATION CONTEXT:
{context}

CUSTOMER QUESTION: {input}

Please provide a comprehensive response following the framework above:"""),
])


INTENT_PROMPTS = {
    "complaint": ChatPromptTemplate.from_messages([
        ("system", """You are a specialized customer service agent handling complaints with advanced conflict resolution skills.

COMPLAINT HANDLING PROTOCOL:
1. **Acknowledge & Empathize**: Recognize the customer's frustration and show understanding
2. **Investigate**: Use provided documentation to understand the issue fully
3. **Solve**: Provide clear resolution steps or alternatives
4. **Prevent**: Suggest ways to avoid similar issues in the future
5. **Follow-up**: Offer additional support channels if needed

TONE: Empathetic, solution-focused, professional, and reassuring
PRIORITY: Customer satisfaction and issue resolution"""),
        ("human", "CONTEXT: {context}\n\nCUSTOMER COMPLAINT: {input}\n\nProvide an empathetic and solution-focused response:"),
    ]),
    
    "inquiry": ChatPromptTemplate.from_messages([
        ("system", """You are an expert information specialist focused on providing comprehensive, educational responses.

INQUIRY RESPONSE STRATEGY:
1. **Educate**: Provide thorough information from company documents
2. **Clarify**: Explain complex concepts in accessible terms
3. **Expand**: Offer related information that might be helpful
4. **Guide**: Suggest logical next steps or additional resources

TONE: Informative, helpful, detailed, and encouraging
PRIORITY: Complete understanding and customer education"""),
        ("human", "CONTEXT: {context}\n\nCUSTOMER INQUIRY: {input}\n\nProvide a comprehensive and educational response:"),
    ]),
    
    "request": ChatPromptTemplate.from_messages([
        ("system", """You are an action-oriented support agent specialized in handling customer requests efficiently.

REQUEST FULFILLMENT APPROACH:
1. **Understand**: Clarify exactly what the customer needs
2. **Execute**: Provide step-by-step instructions using company procedures
3. **Verify**: Ensure the customer has everything needed to succeed
4. **Support**: Offer assistance for any complications that might arise

TONE: Clear, directive, supportive, and confident
PRIORITY: Successful task completion and customer empowerment"""),
        ("human", "CONTEXT: {context}\n\nCUSTOMER REQUEST: {input}\n\nProvide clear, actionable instructions:"),
    ]),
    
    "general": answer_prompt
}

SUMMARIZATION_PROMPTS = {
    "policy": ChatPromptTemplate.from_template("""
Summarize this policy document focusing on:
- Key rules and regulations
- Important deadlines or timeframes  
- Exceptions or special conditions
- Impact on customers/employees

DOCUMENT: {content}
FOCUS AREA: {query}

POLICY SUMMARY:
"""),
    
    "procedure": ChatPromptTemplate.from_template("""
Summarize this procedural document highlighting:
- Step-by-step processes
- Required prerequisites
- Important warnings or notes
- Expected outcomes

DOCUMENT: {content}
FOCUS AREA: {query}

PROCEDURE SUMMARY:
"""),
    
    "general": ChatPromptTemplate.from_template("""
Create a comprehensive summary of this document that:
- Captures the main points and key information
- Highlights important details relevant to customer support
- Organizes information logically
- Maintains accuracy and completeness

DOCUMENT: {content}
USER QUESTION: {query}

SUMMARY:
""")
}

FAQ_GENERATION_PROMPT = ChatPromptTemplate.from_template("""
You are an expert FAQ creator for customer support systems. 

Generate high-quality FAQ pairs from the provided documentation that:

QUALITY CRITERIA:
‚úÖ Address real customer pain points and common questions
‚úÖ Provide complete, actionable answers
‚úÖ Use customer-friendly language (avoid jargon)
‚úÖ Cover diverse aspects of the business/service
‚úÖ Include specific details (numbers, timeframes, procedures)
‚úÖ Anticipate follow-up questions within answers

FAQ CATEGORIES TO CONSIDER:
- Account Management
- Billing & Payments  
- Products/Services
- Technical Support
- Policies & Procedures
- Getting Started
- Troubleshooting

FORMAT REQUIREMENTS:
- Questions should be natural and conversational
- Answers should be comprehensive but scannable
- Use bullet points for lists and steps
- Include relevant policy references when applicable

COMPANY DOCUMENTATION:
{documents}

Generate {num_faqs} diverse, high-quality FAQ pairs:
""")

VARIATION_PROMPTS = {
    "professional": ChatPromptTemplate.from_template("""
Create a professional variation of this customer support response:

ORIGINAL: {response}

PROFESSIONAL VARIATION GUIDELINES:
- Use formal business language
- Emphasize company policies and procedures
- Include relevant reference numbers or documentation
- Maintain professional distance while being helpful

PROFESSIONAL VARIATION:
"""),
    
    "friendly": ChatPromptTemplate.from_template("""
Create a friendly, conversational variation of this customer support response:

ORIGINAL: {response}

FRIENDLY VARIATION GUIDELINES:
- Use warm, approachable language
- Include empathetic phrases and acknowledgments
- Make it feel like talking to a helpful friend
- Maintain professionalism while being personable

FRIENDLY VARIATION:
"""),
    
    "concise": ChatPromptTemplate.from_template("""
Create a concise, efficient variation of this customer support response:

ORIGINAL: {response}

CONCISE VARIATION GUIDELINES:
- Eliminate unnecessary words and phrases
- Focus on essential information only
- Use bullet points for clarity
- Maintain all critical information while reducing length

CONCISE VARIATION:
""")
}

FOLLOWUP_PROMPT = ChatPromptTemplate.from_template("""
Based on this customer support interaction, suggest intelligent follow-up questions that would be genuinely helpful.

CUSTOMER QUESTION: {query}
ASSISTANT RESPONSE: {response}
CONTEXT: {context}

FOLLOW-UP CRITERIA:
‚úÖ Naturally builds on the current conversation
‚úÖ Addresses related topics the customer might need
‚úÖ Helps the customer accomplish their broader goals
‚úÖ Specific and actionable (not generic)
‚úÖ Appropriate for the customer's apparent knowledge level

AVOID:
‚ùå Generic questions like "Anything else?"
‚ùå Repetitive questions about the same topic
‚ùå Questions that require information not available
‚ùå Overly complex or technical questions

Generate 3-5 relevant follow-up questions:
""")

QUERY_ENHANCEMENT_PROMPT = ChatPromptTemplate.from_template("""
Enhance this customer query to improve document retrieval while preserving the original intent.

CONVERSATION HISTORY:
{history}

CURRENT QUERY: {query}

ENHANCEMENT GOALS:
- Add relevant context from conversation history
- Replace ambiguous references (it, this, that) with specific terms
- Include synonyms or related terms that might appear in documents
- Maintain the customer's original question intent
- Keep the enhanced query natural and focused

ENHANCED QUERY:
""")

def get_prompt_by_intent(intent: str):
    """Get the appropriate prompt template based on detected intent"""
    return INTENT_PROMPTS.get(intent, INTENT_PROMPTS["general"])

def get_summarization_prompt(document_type: str = "general"):
    """Get appropriate summarization prompt based on document type"""
    return SUMMARIZATION_PROMPTS.get(document_type, SUMMARIZATION_PROMPTS["general"])

def get_variation_prompt(style: str = "professional"):
    """Get variation prompt for specific response style"""
    return VARIATION_PROMPTS.get(style, VARIATION_PROMPTS["professional"])

__all__ = [
    'contextualize_prompt',
    'answer_prompt', 
    'INTENT_PROMPTS',
    'SUMMARIZATION_PROMPTS',
    'FAQ_GENERATION_PROMPT',
    'VARIATION_PROMPTS',
    'FOLLOWUP_PROMPT',
    'QUERY_ENHANCEMENT_PROMPT',
    'get_prompt_by_intent',
    'get_summarization_prompt', 
    'get_variation_prompt'
]